// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `payload.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Plink)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Plink {
    // message fields
    // @@protoc_insertion_point(field:Plink.version)
    pub version: u32,
    // @@protoc_insertion_point(field:Plink.uuid)
    pub uuid: ::std::string::String,
    // @@protoc_insertion_point(field:Plink.socketIP)
    pub socketIP: ::std::string::String,
    // @@protoc_insertion_point(field:Plink.ts)
    pub ts: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Plink.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Plink {
    fn default() -> &'a Plink {
        <Plink as ::protobuf::Message>::default_instance()
    }
}

impl Plink {
    pub fn new() -> Plink {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Plink| { &m.version },
            |m: &mut Plink| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uuid",
            |m: &Plink| { &m.uuid },
            |m: &mut Plink| { &mut m.uuid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "socketIP",
            |m: &Plink| { &m.socketIP },
            |m: &mut Plink| { &mut m.socketIP },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ts",
            |m: &Plink| { &m.ts },
            |m: &mut Plink| { &mut m.ts },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Plink>(
            "Plink",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Plink {
    const NAME: &'static str = "Plink";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                18 => {
                    self.uuid = is.read_string()?;
                },
                26 => {
                    self.socketIP = is.read_string()?;
                },
                32 => {
                    self.ts = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.uuid);
        }
        if !self.socketIP.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.socketIP);
        }
        if self.ts != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.ts);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if !self.uuid.is_empty() {
            os.write_string(2, &self.uuid)?;
        }
        if !self.socketIP.is_empty() {
            os.write_string(3, &self.socketIP)?;
        }
        if self.ts != 0 {
            os.write_uint64(4, self.ts)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Plink {
        Plink::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.uuid.clear();
        self.socketIP.clear();
        self.ts = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Plink {
        static instance: Plink = Plink {
            version: 0,
            uuid: ::std::string::String::new(),
            socketIP: ::std::string::String::new(),
            ts: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Plink {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Plink").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Plink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Plink {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Channel)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Channel {
    // message fields
    // @@protoc_insertion_point(field:Channel.version)
    pub version: u32,
    // @@protoc_insertion_point(field:Channel.id)
    pub id: u32,
    // @@protoc_insertion_point(field:Channel.ts)
    pub ts: u64,
    // message oneof groups
    pub action: ::std::option::Option<channel::Action>,
    // special fields
    // @@protoc_insertion_point(special_field:Channel.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Channel {
    fn default() -> &'a Channel {
        <Channel as ::protobuf::Message>::default_instance()
    }
}

impl Channel {
    pub fn new() -> Channel {
        ::std::default::Default::default()
    }

    // .ConnectAction connect = 4;

    pub fn connect(&self) -> &ConnectAction {
        match self.action {
            ::std::option::Option::Some(channel::Action::Connect(ref v)) => v,
            _ => <ConnectAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_connect(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_connect(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(channel::Action::Connect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_connect(&mut self, v: ConnectAction) {
        self.action = ::std::option::Option::Some(channel::Action::Connect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_connect(&mut self) -> &mut ConnectAction {
        if let ::std::option::Option::Some(channel::Action::Connect(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(channel::Action::Connect(ConnectAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(channel::Action::Connect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_connect(&mut self) -> ConnectAction {
        if self.has_connect() {
            match self.action.take() {
                ::std::option::Option::Some(channel::Action::Connect(v)) => v,
                _ => panic!(),
            }
        } else {
            ConnectAction::new()
        }
    }

    // .DisconnectAction disconnect = 5;

    pub fn disconnect(&self) -> &DisconnectAction {
        match self.action {
            ::std::option::Option::Some(channel::Action::Disconnect(ref v)) => v,
            _ => <DisconnectAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_disconnect(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_disconnect(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(channel::Action::Disconnect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disconnect(&mut self, v: DisconnectAction) {
        self.action = ::std::option::Option::Some(channel::Action::Disconnect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_disconnect(&mut self) -> &mut DisconnectAction {
        if let ::std::option::Option::Some(channel::Action::Disconnect(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(channel::Action::Disconnect(DisconnectAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(channel::Action::Disconnect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_disconnect(&mut self) -> DisconnectAction {
        if self.has_disconnect() {
            match self.action.take() {
                ::std::option::Option::Some(channel::Action::Disconnect(v)) => v,
                _ => panic!(),
            }
        } else {
            DisconnectAction::new()
        }
    }

    // .DataAction data = 6;

    pub fn data(&self) -> &DataAction {
        match self.action {
            ::std::option::Option::Some(channel::Action::Data(ref v)) => v,
            _ => <DataAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_data(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_data(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(channel::Action::Data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: DataAction) {
        self.action = ::std::option::Option::Some(channel::Action::Data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut DataAction {
        if let ::std::option::Option::Some(channel::Action::Data(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(channel::Action::Data(DataAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(channel::Action::Data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_data(&mut self) -> DataAction {
        if self.has_data() {
            match self.action.take() {
                ::std::option::Option::Some(channel::Action::Data(v)) => v,
                _ => panic!(),
            }
        } else {
            DataAction::new()
        }
    }

    // .SyncAction sync = 7;

    pub fn sync(&self) -> &SyncAction {
        match self.action {
            ::std::option::Option::Some(channel::Action::Sync(ref v)) => v,
            _ => <SyncAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_sync(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_sync(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(channel::Action::Sync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sync(&mut self, v: SyncAction) {
        self.action = ::std::option::Option::Some(channel::Action::Sync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sync(&mut self) -> &mut SyncAction {
        if let ::std::option::Option::Some(channel::Action::Sync(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(channel::Action::Sync(SyncAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(channel::Action::Sync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sync(&mut self) -> SyncAction {
        if self.has_sync() {
            match self.action.take() {
                ::std::option::Option::Some(channel::Action::Sync(v)) => v,
                _ => panic!(),
            }
        } else {
            SyncAction::new()
        }
    }

    // .DetectAction detect = 8;

    pub fn detect(&self) -> &DetectAction {
        match self.action {
            ::std::option::Option::Some(channel::Action::Detect(ref v)) => v,
            _ => <DetectAction as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_detect(&mut self) {
        self.action = ::std::option::Option::None;
    }

    pub fn has_detect(&self) -> bool {
        match self.action {
            ::std::option::Option::Some(channel::Action::Detect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_detect(&mut self, v: DetectAction) {
        self.action = ::std::option::Option::Some(channel::Action::Detect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_detect(&mut self) -> &mut DetectAction {
        if let ::std::option::Option::Some(channel::Action::Detect(_)) = self.action {
        } else {
            self.action = ::std::option::Option::Some(channel::Action::Detect(DetectAction::new()));
        }
        match self.action {
            ::std::option::Option::Some(channel::Action::Detect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_detect(&mut self) -> DetectAction {
        if self.has_detect() {
            match self.action.take() {
                ::std::option::Option::Some(channel::Action::Detect(v)) => v,
                _ => panic!(),
            }
        } else {
            DetectAction::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Channel| { &m.version },
            |m: &mut Channel| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Channel| { &m.id },
            |m: &mut Channel| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ts",
            |m: &Channel| { &m.ts },
            |m: &mut Channel| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ConnectAction>(
            "connect",
            Channel::has_connect,
            Channel::connect,
            Channel::mut_connect,
            Channel::set_connect,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DisconnectAction>(
            "disconnect",
            Channel::has_disconnect,
            Channel::disconnect,
            Channel::mut_disconnect,
            Channel::set_disconnect,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DataAction>(
            "data",
            Channel::has_data,
            Channel::data,
            Channel::mut_data,
            Channel::set_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SyncAction>(
            "sync",
            Channel::has_sync,
            Channel::sync,
            Channel::mut_sync,
            Channel::set_sync,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, DetectAction>(
            "detect",
            Channel::has_detect,
            Channel::detect,
            Channel::mut_detect,
            Channel::set_detect,
        ));
        oneofs.push(channel::Action::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Channel>(
            "Channel",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Channel {
    const NAME: &'static str = "Channel";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                16 => {
                    self.id = is.read_uint32()?;
                },
                24 => {
                    self.ts = is.read_uint64()?;
                },
                34 => {
                    self.action = ::std::option::Option::Some(channel::Action::Connect(is.read_message()?));
                },
                42 => {
                    self.action = ::std::option::Option::Some(channel::Action::Disconnect(is.read_message()?));
                },
                50 => {
                    self.action = ::std::option::Option::Some(channel::Action::Data(is.read_message()?));
                },
                58 => {
                    self.action = ::std::option::Option::Some(channel::Action::Sync(is.read_message()?));
                },
                66 => {
                    self.action = ::std::option::Option::Some(channel::Action::Detect(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.id);
        }
        if self.ts != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.ts);
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &channel::Action::Connect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &channel::Action::Disconnect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &channel::Action::Data(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &channel::Action::Sync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &channel::Action::Detect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if self.id != 0 {
            os.write_uint32(2, self.id)?;
        }
        if self.ts != 0 {
            os.write_uint64(3, self.ts)?;
        }
        if let ::std::option::Option::Some(ref v) = self.action {
            match v {
                &channel::Action::Connect(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &channel::Action::Disconnect(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &channel::Action::Data(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &channel::Action::Sync(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &channel::Action::Detect(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Channel {
        Channel::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.id = 0;
        self.ts = 0;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.action = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Channel {
        static instance: Channel = Channel {
            version: 0,
            id: 0,
            ts: 0,
            action: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Channel {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Channel").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Channel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Channel {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Channel`
pub mod channel {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Channel.action)
    pub enum Action {
        // @@protoc_insertion_point(oneof_field:Channel.connect)
        Connect(super::ConnectAction),
        // @@protoc_insertion_point(oneof_field:Channel.disconnect)
        Disconnect(super::DisconnectAction),
        // @@protoc_insertion_point(oneof_field:Channel.data)
        Data(super::DataAction),
        // @@protoc_insertion_point(oneof_field:Channel.sync)
        Sync(super::SyncAction),
        // @@protoc_insertion_point(oneof_field:Channel.detect)
        Detect(super::DetectAction),
    }

    impl ::protobuf::Oneof for Action {
    }

    impl ::protobuf::OneofFull for Action {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Channel as ::protobuf::MessageFull>::descriptor().oneof_by_name("action").unwrap()).clone()
        }
    }

    impl Action {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Action>("action")
        }
    }
}

// @@protoc_insertion_point(message:ConnectAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct ConnectAction {
    // message fields
    // @@protoc_insertion_point(field:ConnectAction.seq)
    pub seq: u32,
    // @@protoc_insertion_point(field:ConnectAction.ack)
    pub ack: u32,
    // special fields
    // @@protoc_insertion_point(special_field:ConnectAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ConnectAction {
    fn default() -> &'a ConnectAction {
        <ConnectAction as ::protobuf::Message>::default_instance()
    }
}

impl ConnectAction {
    pub fn new() -> ConnectAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq",
            |m: &ConnectAction| { &m.seq },
            |m: &mut ConnectAction| { &mut m.seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack",
            |m: &ConnectAction| { &m.ack },
            |m: &mut ConnectAction| { &mut m.ack },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ConnectAction>(
            "ConnectAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ConnectAction {
    const NAME: &'static str = "ConnectAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq = is.read_uint32()?;
                },
                16 => {
                    self.ack = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.seq);
        }
        if self.ack != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.ack);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq != 0 {
            os.write_uint32(1, self.seq)?;
        }
        if self.ack != 0 {
            os.write_uint32(2, self.ack)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ConnectAction {
        ConnectAction::new()
    }

    fn clear(&mut self) {
        self.seq = 0;
        self.ack = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ConnectAction {
        static instance: ConnectAction = ConnectAction {
            seq: 0,
            ack: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ConnectAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ConnectAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ConnectAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DisconnectAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DisconnectAction {
    // message fields
    // @@protoc_insertion_point(field:DisconnectAction.seq)
    pub seq: u32,
    // @@protoc_insertion_point(field:DisconnectAction.ack)
    pub ack: u32,
    // special fields
    // @@protoc_insertion_point(special_field:DisconnectAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DisconnectAction {
    fn default() -> &'a DisconnectAction {
        <DisconnectAction as ::protobuf::Message>::default_instance()
    }
}

impl DisconnectAction {
    pub fn new() -> DisconnectAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq",
            |m: &DisconnectAction| { &m.seq },
            |m: &mut DisconnectAction| { &mut m.seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack",
            |m: &DisconnectAction| { &m.ack },
            |m: &mut DisconnectAction| { &mut m.ack },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DisconnectAction>(
            "DisconnectAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DisconnectAction {
    const NAME: &'static str = "DisconnectAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq = is.read_uint32()?;
                },
                16 => {
                    self.ack = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.seq);
        }
        if self.ack != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.ack);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq != 0 {
            os.write_uint32(1, self.seq)?;
        }
        if self.ack != 0 {
            os.write_uint32(2, self.ack)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DisconnectAction {
        DisconnectAction::new()
    }

    fn clear(&mut self) {
        self.seq = 0;
        self.ack = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DisconnectAction {
        static instance: DisconnectAction = DisconnectAction {
            seq: 0,
            ack: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DisconnectAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DisconnectAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DisconnectAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisconnectAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DataAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DataAction {
    // message fields
    // @@protoc_insertion_point(field:DataAction.id)
    pub id: u32,
    // @@protoc_insertion_point(field:DataAction.index)
    pub index: u32,
    // @@protoc_insertion_point(field:DataAction.body)
    pub body: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:DataAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DataAction {
    fn default() -> &'a DataAction {
        <DataAction as ::protobuf::Message>::default_instance()
    }
}

impl DataAction {
    pub fn new() -> DataAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &DataAction| { &m.id },
            |m: &mut DataAction| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &DataAction| { &m.index },
            |m: &mut DataAction| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "body",
            |m: &DataAction| { &m.body },
            |m: &mut DataAction| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DataAction>(
            "DataAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DataAction {
    const NAME: &'static str = "DataAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.index = is.read_uint32()?;
                },
                26 => {
                    self.body = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.index);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.index != 0 {
            os.write_uint32(2, self.index)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(3, &self.body)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DataAction {
        DataAction::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.index = 0;
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DataAction {
        static instance: DataAction = DataAction {
            id: 0,
            index: 0,
            body: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DataAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DataAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DataAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DataAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SyncAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SyncAction {
    // message fields
    // @@protoc_insertion_point(field:SyncAction.id)
    pub id: u32,
    // message oneof groups
    pub signal: ::std::option::Option<sync_action::Signal>,
    // special fields
    // @@protoc_insertion_point(special_field:SyncAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SyncAction {
    fn default() -> &'a SyncAction {
        <SyncAction as ::protobuf::Message>::default_instance()
    }
}

impl SyncAction {
    pub fn new() -> SyncAction {
        ::std::default::Default::default()
    }

    // .SynReadySignal synReady = 2;

    pub fn synReady(&self) -> &SynReadySignal {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::SynReady(ref v)) => v,
            _ => <SynReadySignal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_synReady(&mut self) {
        self.signal = ::std::option::Option::None;
    }

    pub fn has_synReady(&self) -> bool {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::SynReady(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_synReady(&mut self, v: SynReadySignal) {
        self.signal = ::std::option::Option::Some(sync_action::Signal::SynReady(v))
    }

    // Mutable pointer to the field.
    pub fn mut_synReady(&mut self) -> &mut SynReadySignal {
        if let ::std::option::Option::Some(sync_action::Signal::SynReady(_)) = self.signal {
        } else {
            self.signal = ::std::option::Option::Some(sync_action::Signal::SynReady(SynReadySignal::new()));
        }
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::SynReady(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_synReady(&mut self) -> SynReadySignal {
        if self.has_synReady() {
            match self.signal.take() {
                ::std::option::Option::Some(sync_action::Signal::SynReady(v)) => v,
                _ => panic!(),
            }
        } else {
            SynReadySignal::new()
        }
    }

    // .AckReadySignal ackReady = 3;

    pub fn ackReady(&self) -> &AckReadySignal {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AckReady(ref v)) => v,
            _ => <AckReadySignal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ackReady(&mut self) {
        self.signal = ::std::option::Option::None;
    }

    pub fn has_ackReady(&self) -> bool {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AckReady(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ackReady(&mut self, v: AckReadySignal) {
        self.signal = ::std::option::Option::Some(sync_action::Signal::AckReady(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ackReady(&mut self) -> &mut AckReadySignal {
        if let ::std::option::Option::Some(sync_action::Signal::AckReady(_)) = self.signal {
        } else {
            self.signal = ::std::option::Option::Some(sync_action::Signal::AckReady(AckReadySignal::new()));
        }
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AckReady(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ackReady(&mut self) -> AckReadySignal {
        if self.has_ackReady() {
            match self.signal.take() {
                ::std::option::Option::Some(sync_action::Signal::AckReady(v)) => v,
                _ => panic!(),
            }
        } else {
            AckReadySignal::new()
        }
    }

    // .AckChunkFinish ackChunkFinish = 4;

    pub fn ackChunkFinish(&self) -> &AckChunkFinish {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(ref v)) => v,
            _ => <AckChunkFinish as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_ackChunkFinish(&mut self) {
        self.signal = ::std::option::Option::None;
    }

    pub fn has_ackChunkFinish(&self) -> bool {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ackChunkFinish(&mut self, v: AckChunkFinish) {
        self.signal = ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ackChunkFinish(&mut self) -> &mut AckChunkFinish {
        if let ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(_)) = self.signal {
        } else {
            self.signal = ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(AckChunkFinish::new()));
        }
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ackChunkFinish(&mut self) -> AckChunkFinish {
        if self.has_ackChunkFinish() {
            match self.signal.take() {
                ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(v)) => v,
                _ => panic!(),
            }
        } else {
            AckChunkFinish::new()
        }
    }

    // .AboutSendSignal aboutSend = 5;

    pub fn aboutSend(&self) -> &AboutSendSignal {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AboutSend(ref v)) => v,
            _ => <AboutSendSignal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_aboutSend(&mut self) {
        self.signal = ::std::option::Option::None;
    }

    pub fn has_aboutSend(&self) -> bool {
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AboutSend(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_aboutSend(&mut self, v: AboutSendSignal) {
        self.signal = ::std::option::Option::Some(sync_action::Signal::AboutSend(v))
    }

    // Mutable pointer to the field.
    pub fn mut_aboutSend(&mut self) -> &mut AboutSendSignal {
        if let ::std::option::Option::Some(sync_action::Signal::AboutSend(_)) = self.signal {
        } else {
            self.signal = ::std::option::Option::Some(sync_action::Signal::AboutSend(AboutSendSignal::new()));
        }
        match self.signal {
            ::std::option::Option::Some(sync_action::Signal::AboutSend(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_aboutSend(&mut self) -> AboutSendSignal {
        if self.has_aboutSend() {
            match self.signal.take() {
                ::std::option::Option::Some(sync_action::Signal::AboutSend(v)) => v,
                _ => panic!(),
            }
        } else {
            AboutSendSignal::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &SyncAction| { &m.id },
            |m: &mut SyncAction| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, SynReadySignal>(
            "synReady",
            SyncAction::has_synReady,
            SyncAction::synReady,
            SyncAction::mut_synReady,
            SyncAction::set_synReady,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AckReadySignal>(
            "ackReady",
            SyncAction::has_ackReady,
            SyncAction::ackReady,
            SyncAction::mut_ackReady,
            SyncAction::set_ackReady,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AckChunkFinish>(
            "ackChunkFinish",
            SyncAction::has_ackChunkFinish,
            SyncAction::ackChunkFinish,
            SyncAction::mut_ackChunkFinish,
            SyncAction::set_ackChunkFinish,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, AboutSendSignal>(
            "aboutSend",
            SyncAction::has_aboutSend,
            SyncAction::aboutSend,
            SyncAction::mut_aboutSend,
            SyncAction::set_aboutSend,
        ));
        oneofs.push(sync_action::Signal::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SyncAction>(
            "SyncAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SyncAction {
    const NAME: &'static str = "SyncAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                18 => {
                    self.signal = ::std::option::Option::Some(sync_action::Signal::SynReady(is.read_message()?));
                },
                26 => {
                    self.signal = ::std::option::Option::Some(sync_action::Signal::AckReady(is.read_message()?));
                },
                34 => {
                    self.signal = ::std::option::Option::Some(sync_action::Signal::AckChunkFinish(is.read_message()?));
                },
                42 => {
                    self.signal = ::std::option::Option::Some(sync_action::Signal::AboutSend(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.signal {
            match v {
                &sync_action::Signal::SynReady(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_action::Signal::AckReady(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_action::Signal::AckChunkFinish(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &sync_action::Signal::AboutSend(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.signal {
            match v {
                &sync_action::Signal::SynReady(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &sync_action::Signal::AckReady(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &sync_action::Signal::AckChunkFinish(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &sync_action::Signal::AboutSend(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SyncAction {
        SyncAction::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.signal = ::std::option::Option::None;
        self.signal = ::std::option::Option::None;
        self.signal = ::std::option::Option::None;
        self.signal = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SyncAction {
        static instance: SyncAction = SyncAction {
            id: 0,
            signal: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SyncAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SyncAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SyncAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SyncAction`
pub mod sync_action {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:SyncAction.signal)
    pub enum Signal {
        // @@protoc_insertion_point(oneof_field:SyncAction.synReady)
        SynReady(super::SynReadySignal),
        // @@protoc_insertion_point(oneof_field:SyncAction.ackReady)
        AckReady(super::AckReadySignal),
        // @@protoc_insertion_point(oneof_field:SyncAction.ackChunkFinish)
        AckChunkFinish(super::AckChunkFinish),
        // @@protoc_insertion_point(oneof_field:SyncAction.aboutSend)
        AboutSend(super::AboutSendSignal),
    }

    impl ::protobuf::Oneof for Signal {
    }

    impl ::protobuf::OneofFull for Signal {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::SyncAction as ::protobuf::MessageFull>::descriptor().oneof_by_name("signal").unwrap()).clone()
        }
    }

    impl Signal {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Signal>("signal")
        }
    }
}

// @@protoc_insertion_point(message:AboutSendSignal)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AboutSendSignal {
    // message fields
    // @@protoc_insertion_point(field:AboutSendSignal.id)
    pub id: u32,
    // @@protoc_insertion_point(field:AboutSendSignal.status)
    pub status: ::protobuf::EnumOrUnknown<AboutStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:AboutSendSignal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AboutSendSignal {
    fn default() -> &'a AboutSendSignal {
        <AboutSendSignal as ::protobuf::Message>::default_instance()
    }
}

impl AboutSendSignal {
    pub fn new() -> AboutSendSignal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &AboutSendSignal| { &m.id },
            |m: &mut AboutSendSignal| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &AboutSendSignal| { &m.status },
            |m: &mut AboutSendSignal| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AboutSendSignal>(
            "AboutSendSignal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AboutSendSignal {
    const NAME: &'static str = "AboutSendSignal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = is.read_uint32()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.id);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(AboutStatus::Resume) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(AboutStatus::Resume) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AboutSendSignal {
        AboutSendSignal::new()
    }

    fn clear(&mut self) {
        self.id = 0;
        self.status = ::protobuf::EnumOrUnknown::new(AboutStatus::Resume);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AboutSendSignal {
        static instance: AboutSendSignal = AboutSendSignal {
            id: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AboutSendSignal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AboutSendSignal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AboutSendSignal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AboutSendSignal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:DetectAction)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DetectAction {
    // message fields
    // @@protoc_insertion_point(field:DetectAction.seq)
    pub seq: u32,
    // @@protoc_insertion_point(field:DetectAction.ack)
    pub ack: u32,
    // @@protoc_insertion_point(field:DetectAction.rtt)
    pub rtt: u32,
    // special fields
    // @@protoc_insertion_point(special_field:DetectAction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DetectAction {
    fn default() -> &'a DetectAction {
        <DetectAction as ::protobuf::Message>::default_instance()
    }
}

impl DetectAction {
    pub fn new() -> DetectAction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "seq",
            |m: &DetectAction| { &m.seq },
            |m: &mut DetectAction| { &mut m.seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ack",
            |m: &DetectAction| { &m.ack },
            |m: &mut DetectAction| { &mut m.ack },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rtt",
            |m: &DetectAction| { &m.rtt },
            |m: &mut DetectAction| { &mut m.rtt },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DetectAction>(
            "DetectAction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DetectAction {
    const NAME: &'static str = "DetectAction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.seq = is.read_uint32()?;
                },
                16 => {
                    self.ack = is.read_uint32()?;
                },
                24 => {
                    self.rtt = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.seq != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.seq);
        }
        if self.ack != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.ack);
        }
        if self.rtt != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.rtt);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.seq != 0 {
            os.write_uint32(1, self.seq)?;
        }
        if self.ack != 0 {
            os.write_uint32(2, self.ack)?;
        }
        if self.rtt != 0 {
            os.write_uint32(3, self.rtt)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DetectAction {
        DetectAction::new()
    }

    fn clear(&mut self) {
        self.seq = 0;
        self.ack = 0;
        self.rtt = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DetectAction {
        static instance: DetectAction = DetectAction {
            seq: 0,
            ack: 0,
            rtt: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DetectAction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DetectAction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DetectAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DetectAction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:SynReadySignal)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SynReadySignal {
    // message fields
    // @@protoc_insertion_point(field:SynReadySignal.length)
    pub length: u32,
    // @@protoc_insertion_point(field:SynReadySignal.size)
    pub size: u32,
    // @@protoc_insertion_point(field:SynReadySignal.sign)
    pub sign: ::std::string::String,
    // @@protoc_insertion_point(field:SynReadySignal.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:SynReadySignal.type)
    pub type_: ::protobuf::EnumOrUnknown<DataType>,
    // special fields
    // @@protoc_insertion_point(special_field:SynReadySignal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SynReadySignal {
    fn default() -> &'a SynReadySignal {
        <SynReadySignal as ::protobuf::Message>::default_instance()
    }
}

impl SynReadySignal {
    pub fn new() -> SynReadySignal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &SynReadySignal| { &m.length },
            |m: &mut SynReadySignal| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &SynReadySignal| { &m.size },
            |m: &mut SynReadySignal| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sign",
            |m: &SynReadySignal| { &m.sign },
            |m: &mut SynReadySignal| { &mut m.sign },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &SynReadySignal| { &m.name },
            |m: &mut SynReadySignal| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &SynReadySignal| { &m.type_ },
            |m: &mut SynReadySignal| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SynReadySignal>(
            "SynReadySignal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SynReadySignal {
    const NAME: &'static str = "SynReadySignal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.length = is.read_uint32()?;
                },
                16 => {
                    self.size = is.read_uint32()?;
                },
                26 => {
                    self.sign = is.read_string()?;
                },
                34 => {
                    self.name = is.read_string()?;
                },
                40 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.length != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.length);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.size);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sign);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(DataType::TEXT) {
            my_size += ::protobuf::rt::int32_size(5, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.length != 0 {
            os.write_uint32(1, self.length)?;
        }
        if self.size != 0 {
            os.write_uint32(2, self.size)?;
        }
        if !self.sign.is_empty() {
            os.write_string(3, &self.sign)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(DataType::TEXT) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SynReadySignal {
        SynReadySignal::new()
    }

    fn clear(&mut self) {
        self.length = 0;
        self.size = 0;
        self.sign.clear();
        self.name.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(DataType::TEXT);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SynReadySignal {
        static instance: SynReadySignal = SynReadySignal {
            length: 0,
            size: 0,
            sign: ::std::string::String::new(),
            name: ::std::string::String::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SynReadySignal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SynReadySignal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SynReadySignal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SynReadySignal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:AckReadySignal)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AckReadySignal {
    // message fields
    // @@protoc_insertion_point(field:AckReadySignal.length)
    pub length: u32,
    // @@protoc_insertion_point(field:AckReadySignal.size)
    pub size: u32,
    // @@protoc_insertion_point(field:AckReadySignal.sign)
    pub sign: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:AckReadySignal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AckReadySignal {
    fn default() -> &'a AckReadySignal {
        <AckReadySignal as ::protobuf::Message>::default_instance()
    }
}

impl AckReadySignal {
    pub fn new() -> AckReadySignal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "length",
            |m: &AckReadySignal| { &m.length },
            |m: &mut AckReadySignal| { &mut m.length },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "size",
            |m: &AckReadySignal| { &m.size },
            |m: &mut AckReadySignal| { &mut m.size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sign",
            |m: &AckReadySignal| { &m.sign },
            |m: &mut AckReadySignal| { &mut m.sign },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AckReadySignal>(
            "AckReadySignal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AckReadySignal {
    const NAME: &'static str = "AckReadySignal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.length = is.read_uint32()?;
                },
                16 => {
                    self.size = is.read_uint32()?;
                },
                26 => {
                    self.sign = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.length != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.length);
        }
        if self.size != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.size);
        }
        if !self.sign.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.sign);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.length != 0 {
            os.write_uint32(1, self.length)?;
        }
        if self.size != 0 {
            os.write_uint32(2, self.size)?;
        }
        if !self.sign.is_empty() {
            os.write_string(3, &self.sign)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AckReadySignal {
        AckReadySignal::new()
    }

    fn clear(&mut self) {
        self.length = 0;
        self.size = 0;
        self.sign.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AckReadySignal {
        static instance: AckReadySignal = AckReadySignal {
            length: 0,
            size: 0,
            sign: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AckReadySignal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AckReadySignal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AckReadySignal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AckReadySignal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:AckChunkFinish)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AckChunkFinish {
    // message fields
    // @@protoc_insertion_point(field:AckChunkFinish.index)
    pub index: u32,
    // @@protoc_insertion_point(field:AckChunkFinish.status)
    pub status: ::protobuf::EnumOrUnknown<FinishStatus>,
    // special fields
    // @@protoc_insertion_point(special_field:AckChunkFinish.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AckChunkFinish {
    fn default() -> &'a AckChunkFinish {
        <AckChunkFinish as ::protobuf::Message>::default_instance()
    }
}

impl AckChunkFinish {
    pub fn new() -> AckChunkFinish {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "index",
            |m: &AckChunkFinish| { &m.index },
            |m: &mut AckChunkFinish| { &mut m.index },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "status",
            |m: &AckChunkFinish| { &m.status },
            |m: &mut AckChunkFinish| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AckChunkFinish>(
            "AckChunkFinish",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AckChunkFinish {
    const NAME: &'static str = "AckChunkFinish";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.index = is.read_uint32()?;
                },
                16 => {
                    self.status = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.index);
        }
        if self.status != ::protobuf::EnumOrUnknown::new(FinishStatus::Ok) {
            my_size += ::protobuf::rt::int32_size(2, self.status.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.index != 0 {
            os.write_uint32(1, self.index)?;
        }
        if self.status != ::protobuf::EnumOrUnknown::new(FinishStatus::Ok) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.status))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AckChunkFinish {
        AckChunkFinish::new()
    }

    fn clear(&mut self) {
        self.index = 0;
        self.status = ::protobuf::EnumOrUnknown::new(FinishStatus::Ok);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AckChunkFinish {
        static instance: AckChunkFinish = AckChunkFinish {
            index: 0,
            status: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AckChunkFinish {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AckChunkFinish").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AckChunkFinish {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AckChunkFinish {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:AboutStatus)
pub enum AboutStatus {
    // @@protoc_insertion_point(enum_value:AboutStatus.Resume)
    Resume = 0,
    // @@protoc_insertion_point(enum_value:AboutStatus.Pause)
    Pause = 1,
    // @@protoc_insertion_point(enum_value:AboutStatus.Stop)
    Stop = 2,
}

impl ::protobuf::Enum for AboutStatus {
    const NAME: &'static str = "AboutStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<AboutStatus> {
        match value {
            0 => ::std::option::Option::Some(AboutStatus::Resume),
            1 => ::std::option::Option::Some(AboutStatus::Pause),
            2 => ::std::option::Option::Some(AboutStatus::Stop),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<AboutStatus> {
        match str {
            "Resume" => ::std::option::Option::Some(AboutStatus::Resume),
            "Pause" => ::std::option::Option::Some(AboutStatus::Pause),
            "Stop" => ::std::option::Option::Some(AboutStatus::Stop),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [AboutStatus] = &[
        AboutStatus::Resume,
        AboutStatus::Pause,
        AboutStatus::Stop,
    ];
}

impl ::protobuf::EnumFull for AboutStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("AboutStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for AboutStatus {
    fn default() -> Self {
        AboutStatus::Resume
    }
}

impl AboutStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<AboutStatus>("AboutStatus")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:DataType)
pub enum DataType {
    // @@protoc_insertion_point(enum_value:DataType.TEXT)
    TEXT = 0,
    // @@protoc_insertion_point(enum_value:DataType.FILE)
    FILE = 1,
}

impl ::protobuf::Enum for DataType {
    const NAME: &'static str = "DataType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataType> {
        match value {
            0 => ::std::option::Option::Some(DataType::TEXT),
            1 => ::std::option::Option::Some(DataType::FILE),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DataType> {
        match str {
            "TEXT" => ::std::option::Option::Some(DataType::TEXT),
            "FILE" => ::std::option::Option::Some(DataType::FILE),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataType] = &[
        DataType::TEXT,
        DataType::FILE,
    ];
}

impl ::protobuf::EnumFull for DataType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataType {
    fn default() -> Self {
        DataType::TEXT
    }
}

impl DataType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataType>("DataType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:FinishStatus)
pub enum FinishStatus {
    // @@protoc_insertion_point(enum_value:FinishStatus.Ok)
    Ok = 0,
    // @@protoc_insertion_point(enum_value:FinishStatus.Err)
    Err = 1,
}

impl ::protobuf::Enum for FinishStatus {
    const NAME: &'static str = "FinishStatus";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FinishStatus> {
        match value {
            0 => ::std::option::Option::Some(FinishStatus::Ok),
            1 => ::std::option::Option::Some(FinishStatus::Err),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<FinishStatus> {
        match str {
            "Ok" => ::std::option::Option::Some(FinishStatus::Ok),
            "Err" => ::std::option::Option::Some(FinishStatus::Err),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [FinishStatus] = &[
        FinishStatus::Ok,
        FinishStatus::Err,
    ];
}

impl ::protobuf::EnumFull for FinishStatus {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("FinishStatus").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for FinishStatus {
    fn default() -> Self {
        FinishStatus::Ok
    }
}

impl FinishStatus {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<FinishStatus>("FinishStatus")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpayload.proto\"a\n\x05Plink\x12\x18\n\x07version\x18\x01\x20\x01(\rR\
    \x07version\x12\x12\n\x04uuid\x18\x02\x20\x01(\tR\x04uuid\x12\x1a\n\x08s\
    ocketIP\x18\x03\x20\x01(\tR\x08socketIP\x12\x0e\n\x02ts\x18\x04\x20\x01(\
    \x04R\x02ts\"\x9d\x02\n\x07Channel\x12\x18\n\x07version\x18\x01\x20\x01(\
    \rR\x07version\x12\x0e\n\x02id\x18\x02\x20\x01(\rR\x02id\x12\x0e\n\x02ts\
    \x18\x03\x20\x01(\x04R\x02ts\x12*\n\x07connect\x18\x04\x20\x01(\x0b2\x0e\
    .ConnectActionH\0R\x07connect\x123\n\ndisconnect\x18\x05\x20\x01(\x0b2\
    \x11.DisconnectActionH\0R\ndisconnect\x12!\n\x04data\x18\x06\x20\x01(\
    \x0b2\x0b.DataActionH\0R\x04data\x12!\n\x04sync\x18\x07\x20\x01(\x0b2\
    \x0b.SyncActionH\0R\x04sync\x12'\n\x06detect\x18\x08\x20\x01(\x0b2\r.Det\
    ectActionH\0R\x06detectB\x08\n\x06action\"3\n\rConnectAction\x12\x10\n\
    \x03seq\x18\x01\x20\x01(\rR\x03seq\x12\x10\n\x03ack\x18\x02\x20\x01(\rR\
    \x03ack\"6\n\x10DisconnectAction\x12\x10\n\x03seq\x18\x01\x20\x01(\rR\
    \x03seq\x12\x10\n\x03ack\x18\x02\x20\x01(\rR\x03ack\"F\n\nDataAction\x12\
    \x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x14\n\x05index\x18\x02\x20\
    \x01(\rR\x05index\x12\x12\n\x04body\x18\x03\x20\x01(\x0cR\x04body\"\xf1\
    \x01\n\nSyncAction\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12-\n\x08s\
    ynReady\x18\x02\x20\x01(\x0b2\x0f.SynReadySignalH\0R\x08synReady\x12-\n\
    \x08ackReady\x18\x03\x20\x01(\x0b2\x0f.AckReadySignalH\0R\x08ackReady\
    \x129\n\x0eackChunkFinish\x18\x04\x20\x01(\x0b2\x0f.AckChunkFinishH\0R\
    \x0eackChunkFinish\x120\n\taboutSend\x18\x05\x20\x01(\x0b2\x10.AboutSend\
    SignalH\0R\taboutSendB\x08\n\x06signal\"G\n\x0fAboutSendSignal\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\rR\x02id\x12$\n\x06status\x18\x02\x20\x01(\x0e2\
    \x0c.AboutStatusR\x06status\"D\n\x0cDetectAction\x12\x10\n\x03seq\x18\
    \x01\x20\x01(\rR\x03seq\x12\x10\n\x03ack\x18\x02\x20\x01(\rR\x03ack\x12\
    \x10\n\x03rtt\x18\x03\x20\x01(\rR\x03rtt\"\x83\x01\n\x0eSynReadySignal\
    \x12\x16\n\x06length\x18\x01\x20\x01(\rR\x06length\x12\x12\n\x04size\x18\
    \x02\x20\x01(\rR\x04size\x12\x12\n\x04sign\x18\x03\x20\x01(\tR\x04sign\
    \x12\x12\n\x04name\x18\x04\x20\x01(\tR\x04name\x12\x1d\n\x04type\x18\x05\
    \x20\x01(\x0e2\t.DataTypeR\x04type\"P\n\x0eAckReadySignal\x12\x16\n\x06l\
    ength\x18\x01\x20\x01(\rR\x06length\x12\x12\n\x04size\x18\x02\x20\x01(\r\
    R\x04size\x12\x12\n\x04sign\x18\x03\x20\x01(\tR\x04sign\"M\n\x0eAckChunk\
    Finish\x12\x14\n\x05index\x18\x01\x20\x01(\rR\x05index\x12%\n\x06status\
    \x18\x02\x20\x01(\x0e2\r.FinishStatusR\x06status*.\n\x0bAboutStatus\x12\
    \n\n\x06Resume\x10\0\x12\t\n\x05Pause\x10\x01\x12\x08\n\x04Stop\x10\x02*\
    \x1e\n\x08DataType\x12\x08\n\x04TEXT\x10\0\x12\x08\n\x04FILE\x10\x01*\
    \x1f\n\x0cFinishStatus\x12\x06\n\x02Ok\x10\0\x12\x07\n\x03Err\x10\x01J\
    \xd0\x16\n\x06\x12\x04\0\0^\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\
    \x02\x04\0\x12\x04\x02\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x02\x08\r\n\
    \x0b\n\x04\x04\0\x02\0\x12\x03\x03\x04\x17\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x03\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x03\x0b\x12\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x03\x15\x16\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\x04\x04\x14\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x04\x04\n\n\x0c\n\
    \x05\x04\0\x02\x01\x01\x12\x03\x04\x0b\x0f\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\x04\x12\x13\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x05\x04\x18\n\x0c\
    \n\x05\x04\0\x02\x02\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\
    \x12\x03\x05\x0b\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x05\x16\x17\n\
    \x0b\n\x04\x04\0\x02\x03\x12\x03\x06\x04\x12\n\x0c\n\x05\x04\0\x02\x03\
    \x05\x12\x03\x06\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x06\x0b\r\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x06\x10\x11\n\n\n\x02\x04\x01\x12\
    \x04\t\0\x14\x01\n\n\n\x03\x04\x01\x01\x12\x03\t\x08\x0f\n\x0b\n\x04\x04\
    \x01\x02\0\x12\x03\n\x04\x17\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03\n\x04\
    \n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x0b\x12\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\n\x15\x16\n\x0b\n\x04\x04\x01\x02\x01\x12\x03\x0b\x04\
    \x12\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x0b\x0b\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x0b\x10\x11\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x0c\x04\x12\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03\x0c\x04\n\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03\x0c\x0b\r\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x0c\x10\
    \x11\n\x0c\n\x04\x04\x01\x08\0\x12\x04\r\x04\x13\x05\n\x0c\n\x05\x04\x01\
    \x08\0\x01\x12\x03\r\n\x10\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x0e\x08\"\
    \n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x0e\x08\x15\n\x0c\n\x05\x04\x01\
    \x02\x03\x01\x12\x03\x0e\x16\x1d\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\
    \x0e\x20!\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x0f\x08(\n\x0c\n\x05\x04\
    \x01\x02\x04\x06\x12\x03\x0f\x08\x18\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x03\x0f\x19#\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x0f&'\n\x0b\n\x04\
    \x04\x01\x02\x05\x12\x03\x10\x08\x1c\n\x0c\n\x05\x04\x01\x02\x05\x06\x12\
    \x03\x10\x08\x12\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x10\x13\x17\n\
    \x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x10\x1a\x1b\n\x0b\n\x04\x04\x01\
    \x02\x06\x12\x03\x11\x08\x1c\n\x0c\n\x05\x04\x01\x02\x06\x06\x12\x03\x11\
    \x08\x12\n\x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x11\x13\x17\n\x0c\n\x05\
    \x04\x01\x02\x06\x03\x12\x03\x11\x1a\x1b\n\x0b\n\x04\x04\x01\x02\x07\x12\
    \x03\x12\x08\x20\n\x0c\n\x05\x04\x01\x02\x07\x06\x12\x03\x12\x08\x14\n\
    \x0c\n\x05\x04\x01\x02\x07\x01\x12\x03\x12\x15\x1b\n\x0c\n\x05\x04\x01\
    \x02\x07\x03\x12\x03\x12\x1e\x1f\n\n\n\x02\x04\x02\x12\x04\x16\0\x19\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\x15\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x17\x04\x13\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\x04\n\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x17\x0b\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x17\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x18\x04\x13\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x18\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03\x18\x0b\x0e\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\
    \x11\x12\n\n\n\x02\x04\x03\x12\x04\x1b\0\x1e\x01\n\n\n\x03\x04\x03\x01\
    \x12\x03\x1b\x08\x18\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x1c\x04\x13\n\x0c\
    \n\x05\x04\x03\x02\0\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x1c\x0b\x0e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1c\x11\x12\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03\x1d\x04\x13\n\x0c\n\x05\x04\x03\x02\
    \x01\x05\x12\x03\x1d\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1d\
    \x0b\x0e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1d\x11\x12\n\n\n\x02\
    \x04\x04\x12\x04\x20\0$\x01\n\n\n\x03\x04\x04\x01\x12\x03\x20\x08\x12\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03!\x04\x12\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x03!\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03!\x0b\r\n\x0c\n\x05\
    \x04\x04\x02\0\x03\x12\x03!\x10\x11\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\
    \"\x04\x15\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03\"\x04\n\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03\"\x0b\x10\n\x0c\n\x05\x04\x04\x02\x01\x03\
    \x12\x03\"\x13\x14\n\x0b\n\x04\x04\x04\x02\x02\x12\x03#\x04\x13\n\x0c\n\
    \x05\x04\x04\x02\x02\x05\x12\x03#\x04\t\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03#\n\x0e\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03#\x11\x12\n\n\n\
    \x02\x04\x05\x12\x04'\0/\x01\n\n\n\x03\x04\x05\x01\x12\x03'\x08\x12\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x03(\x04\x12\n\x0c\n\x05\x04\x05\x02\0\x05\
    \x12\x03(\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03(\x0b\r\n\x0c\n\x05\
    \x04\x05\x02\0\x03\x12\x03(\x10\x11\n\x0c\n\x04\x04\x05\x08\0\x12\x04)\
    \x04.\x05\n\x0c\n\x05\x04\x05\x08\0\x01\x12\x03)\n\x10\n\x0b\n\x04\x04\
    \x05\x02\x01\x12\x03*\x08$\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03*\x08\
    \x16\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03*\x17\x1f\n\x0c\n\x05\x04\
    \x05\x02\x01\x03\x12\x03*\"#\n\x0b\n\x04\x04\x05\x02\x02\x12\x03+\x08$\n\
    \x0c\n\x05\x04\x05\x02\x02\x06\x12\x03+\x08\x16\n\x0c\n\x05\x04\x05\x02\
    \x02\x01\x12\x03+\x17\x1f\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03+\"#\n\
    \x0b\n\x04\x04\x05\x02\x03\x12\x03,\x08*\n\x0c\n\x05\x04\x05\x02\x03\x06\
    \x12\x03,\x08\x16\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x03,\x17%\n\x0c\n\
    \x05\x04\x05\x02\x03\x03\x12\x03,()\n\x0b\n\x04\x04\x05\x02\x04\x12\x03-\
    \x08&\n\x0c\n\x05\x04\x05\x02\x04\x06\x12\x03-\x08\x17\n\x0c\n\x05\x04\
    \x05\x02\x04\x01\x12\x03-\x18!\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x03-$\
    %\n\n\n\x02\x04\x06\x12\x041\04\x01\n\n\n\x03\x04\x06\x01\x12\x031\x08\
    \x17\n\x0b\n\x04\x04\x06\x02\0\x12\x032\x04\x12\n\x0c\n\x05\x04\x06\x02\
    \0\x05\x12\x032\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x032\x0b\r\n\x0c\
    \n\x05\x04\x06\x02\0\x03\x12\x032\x10\x11\n\x0b\n\x04\x04\x06\x02\x01\
    \x12\x033\x04\x1b\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x033\x04\x0f\n\x0c\
    \n\x05\x04\x06\x02\x01\x01\x12\x033\x10\x16\n\x0c\n\x05\x04\x06\x02\x01\
    \x03\x12\x033\x19\x1a\n\n\n\x02\x05\0\x12\x046\0:\x01\n\n\n\x03\x05\0\
    \x01\x12\x036\x05\x10\n\x0b\n\x04\x05\0\x02\0\x12\x037\x04\x0f\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x037\x04\n\n\x0c\n\x05\x05\0\x02\0\x02\x12\x037\
    \r\x0e\n\x0b\n\x04\x05\0\x02\x01\x12\x038\x04\x0e\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x038\x04\t\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x038\x0c\r\n\
    \x0b\n\x04\x05\0\x02\x02\x12\x039\x04\r\n\x0c\n\x05\x05\0\x02\x02\x01\
    \x12\x039\x04\x08\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x039\x0b\x0c\n\n\n\
    \x02\x04\x07\x12\x04<\0@\x01\n\n\n\x03\x04\x07\x01\x12\x03<\x08\x14\n\
    \x1e\n\x04\x04\x07\x02\0\x12\x03=\x04\x13\"\x11\x20\xe6\x95\xb0\xe6\x8d\
    \xae\xe5\x8c\x85\xe5\xba\x8f\xe5\x8f\xb7\n\n\x0c\n\x05\x04\x07\x02\0\x05\
    \x12\x03=\x04\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03=\x0b\x0e\n\x0c\n\
    \x05\x04\x07\x02\0\x03\x12\x03=\x11\x12\n\x1b\n\x04\x04\x07\x02\x01\x12\
    \x03>\x04\x13\"\x0e\x20\xe7\xa1\xae\xe8\xae\xa4\xe5\xba\x8f\xe5\x8f\xb7\
    \n\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\x03>\x04\n\n\x0c\n\x05\x04\x07\
    \x02\x01\x01\x12\x03>\x0b\x0e\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03>\
    \x11\x12\n\x1e\n\x04\x04\x07\x02\x02\x12\x03?\x04\x13\"\x11\x20\xe6\x8e\
    \xa5\xe6\x94\xb6\xe6\x97\xb6\xe9\x97\xb4\xe6\x88\xb3\n\n\x0c\n\x05\x04\
    \x07\x02\x02\x05\x12\x03?\x04\n\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03?\
    \x0b\x0e\n\x0c\n\x05\x04\x07\x02\x02\x03\x12\x03?\x11\x12\n\n\n\x02\x04\
    \x08\x12\x04B\0H\x01\n\n\n\x03\x04\x08\x01\x12\x03B\x08\x16\n\x0b\n\x04\
    \x04\x08\x02\0\x12\x03C\x04\x16\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03C\
    \x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03C\x0b\x11\n\x0c\n\x05\x04\
    \x08\x02\0\x03\x12\x03C\x14\x15\n\x0b\n\x04\x04\x08\x02\x01\x12\x03D\x04\
    \x14\n\x0c\n\x05\x04\x08\x02\x01\x05\x12\x03D\x04\n\n\x0c\n\x05\x04\x08\
    \x02\x01\x01\x12\x03D\x0b\x0f\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03D\
    \x12\x13\n\x0b\n\x04\x04\x08\x02\x02\x12\x03E\x04\x14\n\x0c\n\x05\x04\
    \x08\x02\x02\x05\x12\x03E\x04\n\n\x0c\n\x05\x04\x08\x02\x02\x01\x12\x03E\
    \x0b\x0f\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\x03E\x12\x13\n\x0b\n\x04\
    \x04\x08\x02\x03\x12\x03F\x04\x14\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\
    \x03F\x04\n\n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03F\x0b\x0f\n\x0c\n\x05\
    \x04\x08\x02\x03\x03\x12\x03F\x12\x13\n\x0b\n\x04\x04\x08\x02\x04\x12\
    \x03G\x04\x16\n\x0c\n\x05\x04\x08\x02\x04\x06\x12\x03G\x04\x0c\n\x0c\n\
    \x05\x04\x08\x02\x04\x01\x12\x03G\r\x11\n\x0c\n\x05\x04\x08\x02\x04\x03\
    \x12\x03G\x14\x15\n\n\n\x02\x05\x01\x12\x04J\0M\x01\n\n\n\x03\x05\x01\
    \x01\x12\x03J\x05\r\n\x0b\n\x04\x05\x01\x02\0\x12\x03K\x04\r\n\x0c\n\x05\
    \x05\x01\x02\0\x01\x12\x03K\x04\x08\n\x0c\n\x05\x05\x01\x02\0\x02\x12\
    \x03K\x0b\x0c\n\x0b\n\x04\x05\x01\x02\x01\x12\x03L\x04\r\n\x0c\n\x05\x05\
    \x01\x02\x01\x01\x12\x03L\x04\x08\n\x0c\n\x05\x05\x01\x02\x01\x02\x12\
    \x03L\x0b\x0c\n\n\n\x02\x04\t\x12\x04O\0S\x01\n\n\n\x03\x04\t\x01\x12\
    \x03O\x08\x16\n\x0b\n\x04\x04\t\x02\0\x12\x03P\x04\x16\n\x0c\n\x05\x04\t\
    \x02\0\x05\x12\x03P\x04\n\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03P\x0b\x11\n\
    \x0c\n\x05\x04\t\x02\0\x03\x12\x03P\x14\x15\n\x0b\n\x04\x04\t\x02\x01\
    \x12\x03Q\x04\x14\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03Q\x04\n\n\x0c\n\
    \x05\x04\t\x02\x01\x01\x12\x03Q\x0b\x0f\n\x0c\n\x05\x04\t\x02\x01\x03\
    \x12\x03Q\x12\x13\n\x0b\n\x04\x04\t\x02\x02\x12\x03R\x04\x14\n\x0c\n\x05\
    \x04\t\x02\x02\x05\x12\x03R\x04\n\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03R\
    \x0b\x0f\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03R\x12\x13\n\n\n\x02\x04\n\
    \x12\x04U\0X\x01\n\n\n\x03\x04\n\x01\x12\x03U\x08\x16\n\x0b\n\x04\x04\n\
    \x02\0\x12\x03V\x04\x15\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03V\x04\n\n\x0c\
    \n\x05\x04\n\x02\0\x01\x12\x03V\x0b\x10\n\x0c\n\x05\x04\n\x02\0\x03\x12\
    \x03V\x13\x14\n\x0b\n\x04\x04\n\x02\x01\x12\x03W\x04\x1c\n\x0c\n\x05\x04\
    \n\x02\x01\x06\x12\x03W\x04\x10\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03W\
    \x11\x17\n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03W\x1a\x1b\n\n\n\x02\x05\
    \x02\x12\x04[\0^\x01\n\n\n\x03\x05\x02\x01\x12\x03[\x05\x11\n\x0b\n\x04\
    \x05\x02\x02\0\x12\x03\\\x04\x0b\n\x0c\n\x05\x05\x02\x02\0\x01\x12\x03\\\
    \x04\x06\n\x0c\n\x05\x05\x02\x02\0\x02\x12\x03\\\t\n\n\x0b\n\x04\x05\x02\
    \x02\x01\x12\x03]\x04\x0c\n\x0c\n\x05\x05\x02\x02\x01\x01\x12\x03]\x04\
    \x07\n\x0c\n\x05\x05\x02\x02\x01\x02\x12\x03]\n\x0bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(Plink::generated_message_descriptor_data());
            messages.push(Channel::generated_message_descriptor_data());
            messages.push(ConnectAction::generated_message_descriptor_data());
            messages.push(DisconnectAction::generated_message_descriptor_data());
            messages.push(DataAction::generated_message_descriptor_data());
            messages.push(SyncAction::generated_message_descriptor_data());
            messages.push(AboutSendSignal::generated_message_descriptor_data());
            messages.push(DetectAction::generated_message_descriptor_data());
            messages.push(SynReadySignal::generated_message_descriptor_data());
            messages.push(AckReadySignal::generated_message_descriptor_data());
            messages.push(AckChunkFinish::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(3);
            enums.push(AboutStatus::generated_enum_descriptor_data());
            enums.push(DataType::generated_enum_descriptor_data());
            enums.push(FinishStatus::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
